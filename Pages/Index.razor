@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JsRuntime

<div class="main">
    <ul class="pizza-cards">
    @if (specials != null)
    {
        @foreach (var special in specials)
        {
        <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
            <div class="pizza-info">
            <span class="title">@special.Name</span>
            @special.Description
            <span class="price">@special.GetFormattedBasePrice()</span>
            </div>
        </li>
        }
    }
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(() => ShowConfirm(configuredPizza))" class="delete-item">x</a> 
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>


@code {
    List<PizzaSpecial> specials = new();
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    private async Task ShowConfirm(Pizza removePizza)
    {
      var messageParams = new {
        title = "Are you sure?",
        text = $"Do you want to remove the {removePizza.Special.Name}from your order?",
        icon = "warning",
        buttons = new {
            abort = new {
                text = "Leave it in my order",
                value = false
            },
            confirm = new {
                text = "Remove pizza",
                value = true
            }
        },
        dangerMode = true
      };

      if (await JsRuntime.InvokeAsync<bool>("swal", messageParams)) {
        OrderState.RemoveConfiguredPizza(removePizza);
      }
    }
}